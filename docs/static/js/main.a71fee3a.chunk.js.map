{"version":3,"sources":["wasm/sploosh_wasm.js","App.js","serviceWorker.js","index.js"],"names":["wasm","cachegetUint8Memory0","WASM_VECTOR_LEN","passArray8ToWasm0","arg","malloc","ptr","length","buffer","memory","Uint8Array","set","cachegetInt32Memory0","getInt32Memory0","Int32Array","cachegetFloat64Memory0","getArrayF64FromWasm0","len","Float64Array","subarray","calculate_probabilities","hits","misses","squids_gotten","ptr0","__wbindgen_malloc","len0","ptr1","len1","v2","r0","r1","slice","__wbindgen_free","load","module","imports","a","Response","WebAssembly","instantiateStreaming","headers","get","console","warn","arrayBuffer","bytes","instantiate","instance","Instance","init","input","Request","URL","fetch","exports","__wbindgen_wasm_module","colormap","require","interpolate","naturalsUpTo","n","Array","keys","Tile","isBest","this","props","best","x","y","key","style","display","justifyContent","alignItems","textAlign","width","height","border","valid","outline","zIndex","fontFamily","userSelect","MozUserSelect","WebkitUserSelect","msUserSelect","color","backgroundColor","text","prob","onClick","toFixed","React","Component","process","Map","state","makeEmptyState","doComputation","grid","squidsGotten","probs","observationProb","performance","now","gridValue","push","Number","probabilities","from","debug","undefined","maxY","maxX","highestProb","setState","newState","usedShots","openingOptimizer","margin","fontSize","map","marginLeft","value","onChange","event","target","clearField","marginTop","Math","max","App","document","body","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a71fee3a.chunk.js","sourcesContent":["\nlet wasm;\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nlet cachegetFloat64Memory0 = null;\nfunction getFloat64Memory0() {\n    if (cachegetFloat64Memory0 === null || cachegetFloat64Memory0.buffer !== wasm.memory.buffer) {\n        cachegetFloat64Memory0 = new Float64Array(wasm.memory.buffer);\n    }\n    return cachegetFloat64Memory0;\n}\n\nfunction getArrayF64FromWasm0(ptr, len) {\n    return getFloat64Memory0().subarray(ptr / 8, ptr / 8 + len);\n}\n/**\n* Calculates the probabilities for each cell based on the hits, misses and the\n* squids that have already been killed.\n* @param {Uint8Array} hits\n* @param {Uint8Array} misses\n* @param {number} squids_gotten\n* @returns {Float64Array | undefined}\n*/\nexport function calculate_probabilities(hits, misses, squids_gotten) {\n    var ptr0 = passArray8ToWasm0(hits, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(misses, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    wasm.calculate_probabilities(8, ptr0, len0, ptr1, len1, squids_gotten);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    let v2;\n    if (r0 !== 0) {\n        v2 = getArrayF64FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 8);\n    }\n    return v2;\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nasync function init(input) {\n    // if (typeof input === 'undefined') {\n    //     input = import.meta.url.replace(/\\.js$/, '_bg.wasm');\n    // }\n    const imports = {};\n\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    const { instance, module } = await load(await input, imports);\n\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n\n    return wasm;\n}\n\nexport default init;\n\n","import React from 'react';\nimport $ from 'jquery';\nimport './App.css';\nimport init, { calculate_probabilities } from \"./wasm/sploosh_wasm.js\";\nconst interpolate = require('color-interpolate');\n\n//const colormap = interpolate(['#004', '#090', '#0a0', 'green']);\nconst colormap = interpolate(['#004', '#0a0', '#0d0', '#0f0', '#6f6']);\nconst naturalsUpTo = (n) => [...Array(n).keys()];\n\nclass Tile extends React.Component {\n    render() {\n        const isBest = this.props.best !== null && this.props.best[0] == this.props.x && this.props.best[1] == this.props.y;\n\n        return <div\n            key={this.props.x + ',' + this.props.y}\n            style={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                textAlign: 'center',\n                width: '70px',\n                height: '70px',\n                border: this.props.valid ? '1px solid grey' : '1px solid red',\n                outline: isBest ? '4px solid yellow' : '',\n                zIndex: isBest ? 1 : 0,\n                fontFamily: 'monospace',\n                userSelect: 'none',\n                MozUserSelect: 'none',\n                WebkitUserSelect: 'none',\n                msUserSelect: 'none',\n                color: 'white',\n                backgroundColor: this.props.text === null ? colormap(this.props.prob) : (\n                    this.props.text === 'HIT' ? '#a2a' : '#44a'\n                ),\n            }}\n            onClick={this.props.onClick}\n        >\n            {this.props.text === null ? (this.props.prob * 100).toFixed(2) + '%' : this.props.text}\n        </div>;\n    }\n}\n\nlet wasm = init(process.env.PUBLIC_URL + \"/sploosh_wasm_bg.wasm\");\n\nclass Map extends React.Component {\n    constructor() {\n        super();\n        this.state = this.makeEmptyState();\n        this.doComputation(this.state.grid, this.state.squidsGotten);\n    }\n\n    makeEmptyState() {\n        const grid = [];\n        const probs = [];\n        for (let y = 0; y < 8; y++) {\n            for (let x = 0; x < 8; x++) {\n                grid[[x, y]] = null;\n                probs[[x, y]] = 0.0;\n            }\n        }\n        return { grid, squidsGotten: 'unknown', probs, best: [3, 3], valid: true, observationProb: 1.0 };\n    }\n\n    async doComputation(grid, squidsGotten) {\n        const t0 = performance.now();\n        const hits = [];\n        const misses = [];\n        for (let y = 0; y < 8; y++) {\n            for (let x = 0; x < 8; x++) {\n                const gridValue = grid[[x, y]];\n                if (gridValue === 'HIT')\n                    hits.push(8 * y + x);\n                if (gridValue === 'MISS')\n                    misses.push(8 * y + x);\n            }\n        }\n        let squids_gotten = -1;\n        for (const n of ['0', '1', '2'])\n            if (squidsGotten === n)\n                squids_gotten = Number(n);\n\n        await wasm;\n        const probabilities = calculate_probabilities(Uint8Array.from(hits), Uint8Array.from(misses), squids_gotten);\n        console.debug(probabilities);\n\n        if (probabilities !== undefined) {\n            let maxY = 0;\n            let maxX = 0;\n            let highestProb = -1;\n            let probs = [];\n\n            for (let y = 0; y < 8; y++) {\n                for (let x = 0; x < 8; x++) {\n                    probs[[x, y]] = probabilities[8 * y + x];\n                    if (grid[[x, y]] === null && probabilities[8 * y + x] > highestProb) {\n                        highestProb = probabilities[8 * y + x];\n                        maxX = x;\n                        maxY = y;\n                    }\n                }\n            }\n            const observationProb = probabilities[64];\n            this.setState({ probs, best: highestProb >= 0 ? [maxX, maxY] : null, valid: true, observationProb });\n        }\n    }\n\n    onClick(x, y) {\n        const grid = { ...this.state.grid };\n        let gridValue = grid[[x, y]];\n        switch (gridValue) {\n            case null:\n                gridValue = 'MISS';\n                break;\n            case 'MISS':\n                gridValue = 'HIT';\n                break;\n            case 'HIT':\n                gridValue = null;\n                break;\n        }\n        grid[[x, y]] = gridValue;\n        this.setState({ grid });\n        this.doComputation(grid, this.state.squidsGotten);\n    }\n\n    clearField() {\n        const newState = this.makeEmptyState();\n        this.setState(newState);\n        this.doComputation(newState.grid, newState.squidsGotten);\n    }\n\n    render() {\n        let usedShots = 0;\n        let openingOptimizer = true;\n        for (let y = 0; y < 8; y++) {\n            for (let x = 0; x < 8; x++) {\n                if (this.state.grid[[x, y]] !== null) {\n                    usedShots++;\n                    if (this.state.grid[[x, y]] === 'HIT')\n                        openingOptimizer = false;\n                }\n            }\n        }\n        return <div style={{\n            margin: '20px',\n        }}>\n            <span style={{ fontSize: '150%', color: 'white' }}>Shots used: {usedShots}</span><br />\n            {naturalsUpTo(8).map(\n                (y) => <div key={y} style={{\n                    display: 'flex',\n                }}>\n                    {naturalsUpTo(8).map(\n                        (x) => <Tile\n                            key={x + ',' + y}\n                            x={x} y={y}\n                            onClick={() => this.onClick(x, y)}\n                            text={this.state.grid[[x, y]]}\n                            prob={this.state.probs[[x, y]]}\n                            valid={this.state.valid}\n                            best={this.state.best}\n                        />\n                    )}\n                </div>\n            )}\n            {this.state.valid || <div style={{ fontSize: '150%', color: 'white' }}>Invalid configuration! This is not possible.</div>}\n            <br />\n            <div style={{ fontSize: '150%' }}>\n                <span style={{ color: 'white' }}>Number of squids killed:</span>\n                <select\n                    style={{ marginLeft: '20px', fontSize: '100%' }}\n                    value={this.state.squidsGotten}\n                    onChange={(event) => {\n                        this.setState({ squidsGotten: event.target.value });\n                        this.doComputation(this.state.grid, event.target.value);\n                    }}\n                >\n                    <option value=\"unknown\">Unknown</option>\n                    <option value=\"0\">0</option>\n                    <option value=\"1\">1</option>\n                    <option value=\"2\">2</option>\n                </select>\n                <br />\n                {/*\n                <span style={{color: 'white', fontSize: '80%'}}>\n                    Probability of this pattern yielding these results: {(100 * this.state.observationProb).toFixed(2) + '%'}\n                </span>\n                */}\n            </div>\n            <br />\n            <button style={{ fontSize: '150%' }} onClick={() => { this.clearField(); }}>Reset</button><br />\n            {openingOptimizer && <>\n                <div style={{ color: 'white', fontSize: '120%', marginTop: '20px' }}>\n                    Opening optimizer: Probability that this<br />pattern would get at least one hit: {\n                        this.state.valid ? ((100 * Math.max(0, 1 - this.state.observationProb)).toFixed(2) + '%') : \"Invalid\"\n                    }\n                </div>\n            </>}\n        </div>;\n    }\n}\n\nclass App extends React.Component {\n    componentDidMount() {\n        document.body.style.backgroundColor = '#666';\n    }\n\n    render() {\n        return <div style={{\n            textAlign: 'center',\n        }}>\n            <div style={{ display: 'inline-block' }}>\n                <div style={{ display: 'inline-block', width: '600px' }}>\n                    <h1 style={{ color: 'white' }}>Sploosh Kaboom Probability Calculator</h1>\n                    <p style={{ color: 'white' }}>\n                        This page gives exact probabilities (no approximation) of hitting a squid in each cell, given the observation of hits, misses, and completed squid kills.\n                        Click on the map to cycle a cell between HIT and MISS.\n                        You can also set the number of squids completely killed in the drop-down menu at the bottom.\n                        You should set this to the value you see in the game for the number of squids killed.\n                        This will yield slightly more accurate probabilities.\n                        The highest probability location to play will be shown with a yellow outline.\n                        If you play perfectly according to picking the highlighted cell you will win in 20 or fewer shots ≈18.5% of the time.\n                    </p>\n                </div>\n                <Map />\n                <span style={{ color: 'white' }}>Made by Peter Schmidt-Nielsen</span>\n            </div>\n        </div>;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}